name: Create Release Branch

on:
  push:
    tags:
      - "v*.*.*"

permissions:
    contents: write

jobs:
  create-release-branch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm install @semantic-release/changelog @semantic-release/git conventional-changelog-cli

      - name: Generate Release Notes
        id: release_notes
        run: |
            LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null)

            if [ -z "$LATEST_TAG" ]; then
              # Aucun tag n'existe, utiliser le premier commit
              FROM=$(git rev-list --max-parents=0 HEAD)
            else
              # Au moins un tag existe
              PREVIOUS_TAG=$(git describe --tags --abbrev=0 ${LATEST_TAG}^ 2>/dev/null)
              if [ -z "$PREVIOUS_TAG" ]; then
                # Seulement un tag existe, utiliser le premier commit
                FROM=$(git rev-list --max-parents=0 HEAD)
              else
                FROM=$PREVIOUS_TAG
              fi
            fi
            
            # Générer les notes de version
            npx semantic-release --dry-run --no-ci --generate-notes-only \
              --plugins @semantic-release/release-notes-generator \
              --from $FROM \
              --to ${LATEST_TAG:-HEAD} \
              > release_notes.md
            
            echo "RELEASE_NOTES=$(cat release_notes.md)" >> $GITHUB_OUTPUT


      - name: Get tag
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "TAG=$TAG" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        if: startsWith(github.ref, 'refs/tags/')
        with:
          body_path: release_notes.md
          tag_name: ${{ steps.tag.outputs.TAG }}
          name: Release ${{ steps.tag.outputs.TAG }}
          draft: true
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release Branch
        run: |
          git checkout -b release/${{ steps.tag.outputs.TAG }}
          git push origin release/${{ steps.tag.outputs.TAG }}




      
